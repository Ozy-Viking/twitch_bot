{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Template Project","text":""},{"location":"#template","title":"Template","text":""},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Current Main: GitHub Pages</li> <li>All Versions: Read the Docs</li> </ul>"},{"location":"API/","title":"API documentation","text":""},{"location":"API/#square","title":"Square","text":"<p>Squares the given number.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Number</code> <p>A real positive or negative number.</p> required <p>Returns:</p> Name Type Description <code>Number</code> <code>Number</code> <p>The square of the given number.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>If the given number is not a number.</p> Source code in <code>template_package/__main__.py</code> <pre><code>def square(x: Number | int | float) -&gt; Number:\n\"\"\"\n    Squares the given number.\n    Args:\n        x (Number): A real positive or negative number.\n    Returns:\n        Number: The square of the given number.\n    Raises:\n        TypeError: If the given number is not a number.\n    \"\"\"\nif isinstance(x, int | float):\nx = Number(x)\nreturn Number(pow(x, 2))\n</code></pre>"},{"location":"API/#pi","title":"Pi","text":"<p>Value of pi to set decimal value.</p> Source code in <code>template_package/stubby/idk.py</code> <pre><code>class Pi:\n\"\"\"Value of pi to set decimal value.\"\"\"\ndef __init__(self, number_of_decimals: int = 2) -&gt; None:\nself.n_values: int = number_of_decimals\ndef round(self, number_of_decimals: Optional[int] = None) -&gt; Pi:\n\"\"\"\n        Set rounding value for pi.\n        Args:\n            number_of_decimals (int): Number of decimal places.\n        Returns:\n            Pi: self\n        Raises:\n            TypeError: Number of decimal places must be an integer.\n        \"\"\"\nif not isinstance(number_of_decimals, int):\nraise TypeError(\"Number of decimal places must be an integer.\")\nself.n_values = number_of_decimals\nreturn self\n@property\ndef pi(self) -&gt; float:\n\"\"\"\n        pi\n        Returns:\n            float: Rounded to the set value of the decimal places.\n        \"\"\"\nreturn round(math.pi, self.n_values)\n</code></pre>"},{"location":"API/#template_package.stubby.idk.Pi.pi","title":"<code>pi: float</code>  <code>property</code>","text":"<p>pi</p> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>Rounded to the set value of the decimal places.</p>"},{"location":"API/#template_package.stubby.idk.Pi.round","title":"<code>round(number_of_decimals=None)</code>","text":"<p>Set rounding value for pi.</p> <p>Parameters:</p> Name Type Description Default <code>number_of_decimals</code> <code>int</code> <p>Number of decimal places.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Pi</code> <code>Pi</code> <p>self</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>Number of decimal places must be an integer.</p> Source code in <code>template_package/stubby/idk.py</code> <pre><code>def round(self, number_of_decimals: Optional[int] = None) -&gt; Pi:\n\"\"\"\n    Set rounding value for pi.\n    Args:\n        number_of_decimals (int): Number of decimal places.\n    Returns:\n        Pi: self\n    Raises:\n        TypeError: Number of decimal places must be an integer.\n    \"\"\"\nif not isinstance(number_of_decimals, int):\nraise TypeError(\"Number of decimal places must be an integer.\")\nself.n_values = number_of_decimals\nreturn self\n</code></pre>"},{"location":"API/#ui","title":"UI","text":"<p>Init for ui.</p>"},{"location":"API/#template_package.ui.Number","title":"<code>Number</code>","text":"<p>Number</p> <p>A representation of a number.</p> <p>Attributes:</p> Name Type Description <code>x</code> <code>int | float</code> <p>Value of the object.</p> <p>Raises:</p> Type Description <code>NumberError</code> <p>X must be a valid number.</p> Source code in <code>template_package/ui/accepted_headers.py</code> <pre><code>class Number:\n\"\"\"Number\n    A representation of a number.\n    Attributes:\n        x (int | float): Value of the object.\n    Raises:\n        NumberError: X must be a valid number.\n    \"\"\"\ndef __init__(self, x: int | float) -&gt; None:\nif not isinstance(x, Number | int | float):\nraise NumberError(\"Not a valid number.\")\nif isinstance(x, Number):\nx = x.x\nself.x: int | float = x\ndef __pow__(\nself,\npower: int | float | Number,\nmodulo: int | float | Number | None = None,\n) -&gt; Number:\n\"\"\"\n        Takes x to the power of power moduls modulo.\n        Then puts value into a Number class form.\n        Args:\n            power (int | float | Number): Value for self.x to be raised to.\n            modulo (int | float | Number | None): Modulus. Default is None.\n        Returns:\n            Number: Returns a new instance of Number with x being the result.\n        \"\"\"\nif isinstance(power, type(self)):\npower = power.x\nif isinstance(modulo, type(self)):\nmodulo = modulo.x\nif modulo is None:\nreturn Number(self.x**power)\nif (not isinstance(modulo, int)) and (modulo is not None):\nmodulo = int(round(modulo))\nreturn Number((self.x**power) % modulo)\ndef __eq__(self, other):\nif isinstance(other, type(self)):\nreturn self.x == other.x\nelif isinstance(other, int | float):\nreturn self.x == other\nelse:\nreturn NotImplemented\n</code></pre>"},{"location":"API/#template_package.ui.accepted_headers.Number.__pow__","title":"<code>__pow__(power, modulo=None)</code>","text":"<p>Takes x to the power of power moduls modulo. Then puts value into a Number class form.</p> <p>Parameters:</p> Name Type Description Default <code>power</code> <code>int | float | Number</code> <p>Value for self.x to be raised to.</p> required <code>modulo</code> <code>int | float | Number | None</code> <p>Modulus. Default is None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Number</code> <code>Number</code> <p>Returns a new instance of Number with x being the result.</p> Source code in <code>template_package/ui/accepted_headers.py</code> <pre><code>def __pow__(\nself,\npower: int | float | Number,\nmodulo: int | float | Number | None = None,\n) -&gt; Number:\n\"\"\"\n    Takes x to the power of power moduls modulo.\n    Then puts value into a Number class form.\n    Args:\n        power (int | float | Number): Value for self.x to be raised to.\n        modulo (int | float | Number | None): Modulus. Default is None.\n    Returns:\n        Number: Returns a new instance of Number with x being the result.\n    \"\"\"\nif isinstance(power, type(self)):\npower = power.x\nif isinstance(modulo, type(self)):\nmodulo = modulo.x\nif modulo is None:\nreturn Number(self.x**power)\nif (not isinstance(modulo, int)) and (modulo is not None):\nmodulo = int(round(modulo))\nreturn Number((self.x**power) % modulo)\n</code></pre>"},{"location":"API/#template_package.ui.NumberError","title":"<code>NumberError</code>","text":"<p>         Bases: <code>TypeError</code></p> <p>Invalid type for Number class.</p> Source code in <code>template_package/ui/accepted_headers.py</code> <pre><code>class NumberError(TypeError):\n\"\"\"\n    Invalid type for Number class.\n    \"\"\"\npass\n</code></pre>"},{"location":"API/#admonition","title":"Admonition","text":""},{"location":"API/#warning","title":"Warning","text":"<p>Warning</p> <p>This is a warning message.</p>"},{"location":"API/#note","title":"Note","text":"<p>Note</p> <p>This is a notice message.</p>"},{"location":"Installation/","title":"Installation","text":"<p>Installation Methods</p> <p>Here are the 2 methods of the installation.</p> GitHubPYPi <pre><code>git clone git@github.com:Ozy-Viking/template\n</code></pre> <pre><code>pip install template_project\n</code></pre> <p>If you get an <code>TypeError</code>1</p> <p>Here is some code: <pre><code>import pymdownx; pymdownx.__version__  # [^2]\n</code></pre></p> <p>The mock shebang will be treated like text here: <code>#!js var test = 0;</code>.</p> <p>The <code>range()</code> function is used to generate a sequence of numbers.</p> Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Abstract<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> </p> <p>Info<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> </p> <p>Tip<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> </p> <p>Success<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> </p> <p>Question<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> </p> <p>Warning<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> </p> <p>Failure<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> </p> <p>Danger<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> </p> <p>Bug<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> </p> <p>Example<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> </p> <p>Quote</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <ol> <li> <p>This paragraph should be rendered at the bottom.\u00a0\u21a9</p> </li> <li> <p> I'm a code annotation! I can contain <code>code</code>, formatted text, images, ... basically anything that can be written in Markdown.\u00a0\u21a9</p> </li> </ol>"},{"location":"full/","title":"Full","text":"<p>Template Package</p>"},{"location":"full/#template_package.Pi","title":"<code>Pi</code>","text":"<p>Value of pi to set decimal value.</p> Source code in <code>template_package/stubby/idk.py</code> <pre><code>class Pi:\n\"\"\"Value of pi to set decimal value.\"\"\"\ndef __init__(self, number_of_decimals: int = 2) -&gt; None:\nself.n_values: int = number_of_decimals\ndef round(self, number_of_decimals: Optional[int] = None) -&gt; Pi:\n\"\"\"\n        Set rounding value for pi.\n        Args:\n            number_of_decimals (int): Number of decimal places.\n        Returns:\n            Pi: self\n        Raises:\n            TypeError: Number of decimal places must be an integer.\n        \"\"\"\nif not isinstance(number_of_decimals, int):\nraise TypeError(\"Number of decimal places must be an integer.\")\nself.n_values = number_of_decimals\nreturn self\n@property\ndef pi(self) -&gt; float:\n\"\"\"\n        pi\n        Returns:\n            float: Rounded to the set value of the decimal places.\n        \"\"\"\nreturn round(math.pi, self.n_values)\n</code></pre>"},{"location":"full/#template_package.stubby.idk.Pi.pi","title":"<code>pi: float</code>  <code>property</code>","text":"<p>pi</p> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>Rounded to the set value of the decimal places.</p>"},{"location":"full/#template_package.stubby.idk.Pi.round","title":"<code>round(number_of_decimals=None)</code>","text":"<p>Set rounding value for pi.</p> <p>Parameters:</p> Name Type Description Default <code>number_of_decimals</code> <code>int</code> <p>Number of decimal places.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Pi</code> <code>Pi</code> <p>self</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>Number of decimal places must be an integer.</p> Source code in <code>template_package/stubby/idk.py</code> <pre><code>def round(self, number_of_decimals: Optional[int] = None) -&gt; Pi:\n\"\"\"\n    Set rounding value for pi.\n    Args:\n        number_of_decimals (int): Number of decimal places.\n    Returns:\n        Pi: self\n    Raises:\n        TypeError: Number of decimal places must be an integer.\n    \"\"\"\nif not isinstance(number_of_decimals, int):\nraise TypeError(\"Number of decimal places must be an integer.\")\nself.n_values = number_of_decimals\nreturn self\n</code></pre>"},{"location":"full/#template_package.main","title":"<code>main()</code>","text":"<p>The main function for the module.</p> <p>Squares the first 50 integer numbers.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Exit code</p> Source code in <code>template_package/__main__.py</code> <pre><code>def main() -&gt; int:\n\"\"\"\n    The main function for the module.\n    Squares the first 50 integer numbers.\n    Returns:\n        int: Exit code\n    \"\"\"\nfor idx in range(50):\nsquare(Number(idx))\nreturn 0\n</code></pre>"},{"location":"full/#template_package.square","title":"<code>square(x)</code>","text":"<p>Squares the given number.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Number</code> <p>A real positive or negative number.</p> required <p>Returns:</p> Name Type Description <code>Number</code> <code>Number</code> <p>The square of the given number.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>If the given number is not a number.</p> Source code in <code>template_package/__main__.py</code> <pre><code>def square(x: Number | int | float) -&gt; Number:\n\"\"\"\n    Squares the given number.\n    Args:\n        x (Number): A real positive or negative number.\n    Returns:\n        Number: The square of the given number.\n    Raises:\n        TypeError: If the given number is not a number.\n    \"\"\"\nif isinstance(x, int | float):\nx = Number(x)\nreturn Number(pow(x, 2))\n</code></pre>"},{"location":"mermaid/","title":"Mermaid Example","text":"<pre><code>sequenceDiagram\n    autonumber\n    actor Client\n    participant OAuth\n    links OAuth: { \"Dashboard\": \"https://local.zackhankin.com\", \"AuthAPI\": \"https://authlocal.zackhankin.com\"}\n    participant Server\n    link Server: Dashboard @ https://ares.local.zackhankin.com\n    loop Every minute\n        Client --&gt;&gt; Client: Checks Facebook\n    end\n    Client -&gt;&gt;+ OAuth: Request Access Token\n    OAuth -&gt;&gt;- Client: Sends back token\n    Client -&gt;&gt;+ Server: Requests resource\n    Server -&gt;&gt;+ OAuth: Validates token\n    OAuth -&gt;&gt;- Server: Token Valid\n    Server -&gt;&gt;- Client: Sends resources</code></pre>"}]}